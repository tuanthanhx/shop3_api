openapi: 3.0.0
info:
  title: Shop3 API
  description: Documentation for Shop3 API (Seller)
  version: 1.0.0
servers:
  - url: http://localhost:3000

paths:
  # /users:
  #   get:
  #     summary: Returns a list of users.
  #     tags:
  #       - Users
  #     parameters:
  #       - name: name
  #         in: query
  #         description: Names to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: email
  #         in: query
  #         description: Emails to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: phone
  #         in: query
  #         description: Phones to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: page
  #         in: query
  #         description: The page number for paginated results.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 1
  #       - name: limit
  #         in: query
  #         description: Maximum number of results to return.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 10
  #     responses:
  #       "200":
  #         description: A JSON array of user
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 totalItems:
  #                   type: integer
  #                   example: 100
  #                 totalPages:
  #                   type: integer
  #                   example: 10
  #                 currentPage:
  #                   type: integer
  #                   example: 1
  #                 data:
  #                   type: array
  #                   items:
  #                     $ref: "#/components/schemas/User"

  #     security:
  #       - bearerAuth: []
  #   post:
  #     summary: Creates a user.
  #     tags:
  #       - Users
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/UserAddRequest"
  #     responses:
  #       "200":
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #     security:
  #       - bearerAuth: []

  # /users/{id}:
  #   get:
  #     summary: Returns a user by ID.
  #     tags:
  #       - Users
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of user
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: A JSON object of user
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #     security:
  #       - bearerAuth: []
  #   put:
  #     summary: Updates a user.
  #     tags:
  #       - Users
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of user
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/UserUpdateRequest"
  #     responses:
  #       "200":
  #         description: Updated
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #     security:
  #       - bearerAuth: []
  #   delete:
  #     summary: Deletes a user.
  #     tags:
  #       - Users
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of user
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: Deleted
  #     security:
  #       - bearerAuth: []

  # /languages:
  #   get:
  #     summary: Returns a list of languages.
  #     tags:
  #       - Languages
  #     parameters:
  #       - name: name
  #         in: query
  #         description: Names to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: page
  #         in: query
  #         description: The page number for paginated results.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 1
  #       - name: limit
  #         in: query
  #         description: Maximum number of results to return.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 10
  #     responses:
  #       "200":
  #         description: A JSON array of languages
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 totalItems:
  #                   type: integer
  #                   example: 100
  #                 totalPages:
  #                   type: integer
  #                   example: 10
  #                 currentPage:
  #                   type: integer
  #                   example: 1
  #                 data:
  #                   type: array
  #                   items:
  #                     $ref: "#/components/schemas/Language"
  #     security:
  #       - bearerAuth: []
  #   post:
  #     summary: Creates a language.
  #     tags:
  #       - Languages
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: English
  #     responses:
  #       "200":
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Language"
  #     security:
  #       - bearerAuth: []

  # /languages/{id}:
  #   get:
  #     summary: Returns a language by ID.
  #     tags:
  #       - Languages
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of language
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: A JSON object of language
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Language"
  #     security:
  #       - bearerAuth: []
  #   put:
  #     summary: Updates a language.
  #     tags:
  #       - Languages
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of language
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: English
  #     responses:
  #       "200":
  #         description: Updated
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Language"
  #     security:
  #       - bearerAuth: []
  #   delete:
  #     summary: Deletes a language.
  #     tags:
  #       - Languages
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of language
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: Deleted
  #     security:
  #       - bearerAuth: []

  # /currencies:
  #   get:
  #     summary: Returns a list of currencies.
  #     tags:
  #       - Currencies
  #     parameters:
  #       - name: name
  #         in: query
  #         description: Names to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: code
  #         in: query
  #         description: Codes to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: page
  #         in: query
  #         description: The page number for paginated results.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 1
  #       - name: limit
  #         in: query
  #         description: Maximum number of results to return.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 10
  #     responses:
  #       "200":
  #         description: A JSON array of currencies
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 totalItems:
  #                   type: integer
  #                   example: 100
  #                 totalPages:
  #                   type: integer
  #                   example: 10
  #                 currentPage:
  #                   type: integer
  #                   example: 1
  #                 data:
  #                   type: array
  #                   items:
  #                     $ref: "#/components/schemas/Currency"
  #     security:
  #       - bearerAuth: []
  #   post:
  #     summary: Creates a currency.
  #     tags:
  #       - Currencies
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: U.S. dollar
  #               code:
  #                 type: string
  #                 example: USD
  #               symbol:
  #                 type: string
  #                 example: $
  #     responses:
  #       "200":
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Currency"
  #     security:
  #       - bearerAuth: []

  # /currencies/{id}:
  #   get:
  #     summary: Returns a currency by ID.
  #     tags:
  #       - Currencies
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of currency
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: A JSON object of currency
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Currency"
  #     security:
  #       - bearerAuth: []
  #   put:
  #     summary: Updates a currency.
  #     tags:
  #       - Currencies
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of currency
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: U.S. dollar
  #               code:
  #                 type: string
  #                 example: USD
  #               symbol:
  #                 type: string
  #                 example: $
  #     responses:
  #       "200":
  #         description: Updated
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Currency"
  #     security:
  #       - bearerAuth: []
  #   delete:
  #     summary: Deletes a currency.
  #     tags:
  #       - Currencies
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of currency
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: Deleted
  #     security:
  #       - bearerAuth: []

  /media/product_images:
    post:
      summary: Upload Product Images
      tags:
        - Media
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  maxItems: 9
                  items:
                    type: string
                    format: binary
              required:
                - files
      responses:
        '200':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    maxItems: 9
                    items:
                      type: string
                      example: https://storage.googleapis.com/dummy.jpg
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /media/product_video:
    post:
      summary: Upload Product Video
      tags:
        - Media
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: https://storage.googleapis.com/dummy.jpg
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /media/product_variant_image:
    post:
      summary: Upload Product Variant Image
      tags:
        - Media
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: https://storage.googleapis.com/dummy.jpg
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      parameters:
        - name: parentId
          in: query
          description: ID of the parent category
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of categories
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

    post:
      summary: Create a new category
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                parentId:
                  type: integer
              required:
                - name
      responses:
        '201':
          description: The newly created category
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /categories/{id}:
    put:
      summary: Update a category
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          description: ID of the category to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                parentId:
                  type: integer
              required:
                - name
      responses:
        '200':
          description: The updated category
        '400':
          description: Bad Request
        '404':
          description: Category not found
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

    delete:
      summary: Delete a category
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          description: ID of the category to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted successfully
        '400':
          description: Bad Request
        '404':
          description: Category not found
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /categories/{id}/attributes:
    get:
      summary: Get all attributes of the category
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          description: ID of the category to get attributes
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of attributes of the category
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int32
                          example: 1
                        name:
                          type: string
                          example: 'Season'
                        attributeValues:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                format: int32
                                example: 1
                              name:
                                type: string
                                example: 'Spring'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /brands:
    get:
      summary: Get all brands
      tags:
        - Brands
      responses:
        '200':
          description: A list of brands
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

    post:
      summary: Create a new brand
      tags:
        - Brands
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Brand
                description:
                  type: string
                  example: Dummy
              required:
                - name
      responses:
        '201':
          description: The newly created brand
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /products:
    get:
      summary: Get list of products
      tags:
        - Products
      parameters:
        - name: keyword
          in: query
          description: Search by product name, ID or seller SKU
          example: jacket
          required: false
          style: form
          schema:
            type: string
            default: null
        - name: minPrice
          in: query
          description: Minimum price
          example: 10000
          required: false
          style: form
          schema:
            type: integer
            format: int32
            default: null
        - name: maxPrice
          in: query
          description: Maximum price
          example: 200000
          required: false
          style: form
          schema:
            type: integer
            format: int32
            default: null
        - name: statusId
          in: query
          description: Search by Status ID
          example: 1
          required: false
          style: form
          schema:
            type: integer
            format: int32
            default: null
        - name: categoryId
          in: query
          description: Search by Category ID(s) (can be multiple values, comma separated)
          example: 1,2
          required: false
          style: form
          schema:
            type: string
            default: null

        - name: codStatus
          in: query
          description: Search by COD Status
          example: true
          required: false
          style: form
          schema:
            type: boolean
            default: null

        # - name: commissionPlanStatus // TODO : Update later when make other features
        # - name: affiliateOpportunityFilter // TODO : Update later when make other features
        # - name: hasPriceDiagnosticResult // TODO : Update later when make other features

        - name: page
          in: query
          description: The page number for paginated results
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortField
          in: query
          description: Sort result by field
          required: false
          schema:
            type: string
            default: id
        - name: sortOrder
          in: query
          description: Sort result in direction
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']
            default: asc
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                    example: 100
                  totalPages:
                    type: integer
                    example: 10
                  currentPage:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

    post:
      summary: Create a new product (Update doc. later)
      description: (Done this API, but update doc. later, now developers can use Postman collection file instead)
      tags:
        - Products
      # requestBody:
      #   required: true
      #   content:
      #     multipart/form-data:
      #       schema:
      #         type: object
      #         properties:
      #           name:
      #             type: string
      #             example: Example
      #           categoryId:
      #             type: integer
      #             example: 1
      #           description:
      #             type: string
      #             example: Dummy
      #           price:
      #             type: number
      #             format: float
      #             example: 100000
      #           sku:
      #             type: string
      #             example: SKU0001
      #           quantity:
      #             type: integer
      #             example: 100
      #           thumbnailImage:
      #             type: string
      #             format: binary
      #           thumbnailVideo:
      #             type: string
      #             format: binary
      #           images:
      #             type: array
      #             maxItems: 9
      #             items:
      #               type: string
      #               format: binary
      #           variants:
      #             type: array
      #             items:
      #               $ref: '#/components/schemas/Variant'
      #           productVariants:
      #             type: array
      #             items:
      #               $ref: '#/components/schemas/ProductVariant'
      #         required:
      #           - name
      #           - categoryId
      #           - thumbnailImage
      responses:
        '201':
          description: OK
          # content:
          #   application/json:
          #     schema:
          #       $ref: "#/components/schemas/ProductResponse"
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /products/{id}:
    put:
      summary: Update a product (Update doc. later)
      description: (Done this API, but update doc. later, now developers can use Postman collection file instead)
      tags:
        - Products
      # requestBody:
      #   required: true
      #   content:
      #     multipart/form-data:
      #       schema:
      #         type: object
      #         properties:
      #           name:
      #             type: string
      #             example: Example
      #           categoryId:
      #             type: integer
      #             example: 1
      #           description:
      #             type: string
      #             example: Dummy
      #           price:
      #             type: number
      #             format: float
      #             example: 100000
      #           sku:
      #             type: string
      #             example: SKU0001
      #           quantity:
      #             type: integer
      #             example: 100
      #           thumbnailImage:
      #             type: string
      #             format: binary
      #           thumbnailVideo:
      #             type: string
      #             format: binary
      #           images:
      #             type: array
      #             maxItems: 9
      #             items:
      #               type: string
      #               format: binary
      #           variants:
      #             type: array
      #             items:
      #               $ref: '#/components/schemas/Variant'
      #           productVariants:
      #             type: array
      #             items:
      #               $ref: '#/components/schemas/ProductVariant'
      #         required:
      #           - name
      #           - categoryId
      #           - thumbnailImage
      responses:
        '201':
          description: OK
          # content:
          #   application/json:
          #     schema:
          #       $ref: "#/components/schemas/ProductResponse"
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

    delete:
      summary: Delete a product
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: ID of the product to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
        '400':
          description: Bad Request
        '404':
          description: Product not found
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /products/bulk_activate:
    post:
      summary: Bulk activate a list of products
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                    example: 1
      responses:
        '201':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /products/bulk_deactivate:
    post:
      summary: Bulk deactivate a list of products
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                    example: 1
      responses:
        '201':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /products/bulk_delete:
    post:
      summary: Bulk delete a list of products
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                    example: 1
      responses:
        '201':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /products/bulk_recover:
    post:
      summary: Bulk recover a list of products
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                    example: 1
      responses:
        '201':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /sellers/business_types:
    get:
      summary: Get a list of business types
      tags:
        - Sellers
      responses:
        '200':
          description: A JSON array of business types
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/SellerBusinessTypesResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /sellers/verification:
    get:
      summary: Get current verification data
      tags:
        - Sellers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ShopResponse'
      security:
        - bearerAuth: []
    post:
      summary: Create a new shop verification data
      description: |
        1. To "Save", set `isSubmitted` as `false`
        2. To "Submit", set `isSubmitted` as `true`
        3. If `businessType` is 1, fields start with `household*` are required
        3. If `businessType` is 2, fields start with `individual*` are required
        3. If `businessType` is 3, fields start with `corporate*` are required
      tags:
        - Sellers
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - shopName
                - businessType
              properties:
                businessType:
                  type: number
                  enum: [1, 2, 3]
                  example: 1
                shopName:
                  type: string
                  example: 'Sample'
                householdBusinessRegistrationDocument1:
                  type: string
                  format: binary
                householdBusinessRegistrationDocument2:
                  type: string
                  format: binary
                householdBusinessRegistrationDocument3:
                  type: string
                  format: binary
                householdBusinessName:
                  type: string
                  example: 'My Company'
                householdBusinessRegistrationNumber:
                  type: string
                  example: 'AB100000'
                householdBusinessOwnerName:
                  type: string
                  example: 'John Smith'
                householdBusinessOwnerIdNumber:
                  type: string
                  example: '123456789'
                individualIdentityCardFront:
                  type: string
                  format: binary
                individualIdentityCardBack:
                  type: string
                  format: binary
                individualIdentityCardNumber:
                  type: string
                  example: '123456789'
                individualOwnerDob:
                  type: string
                  format: date-time
                individualBusinessOwnerName:
                  type: string
                  example: 'John Smith'
                individualResidentialAddress:
                  type: string
                  example: '206 Lorem Ipsum st.'
                individualProductCategoryId:
                  type: integer
                  example: 1
                corporateCompanyRegistrationDocument1:
                  type: string
                  format: binary
                corporateCompanyRegistrationDocument2:
                  type: string
                  format: binary
                corporateCompanyRegistrationDocument3:
                  type: string
                  format: binary
                corporateCompanyName:
                  type: string
                  example: 'My Company'
                corporateEnterpiseCodeNumber:
                  type: string
                  example: 'AB100000'
                useCurrentEmail:
                  type: boolean
                newEmail:
                  type: string
                  format: email
                  example: johnsm@gmail.com
                newEmailOtp:
                  type: string
                useCurrentPhone:
                  type: string
                  example: 123456
                newPhone:
                  type: string
                  format: phone
                  example: '0123456789'
                newPhoneOtp:
                  type: string
                  example: 123456
                subscribeMailingList:
                  type: boolean
                  example: true
                isSubmitted:
                  type: boolean
                  example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ShopResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

    put:
      summary: Update a new shop verification data
      description: |
        1. To "Save", set `isSubmitted` as `false`
        2. To "Submit", set `isSubmitted` as `true`
        3. If `businessType` is 1, fields start with `household*` are required
        3. If `businessType` is 2, fields start with `individual*` are required
        3. If `businessType` is 3, fields start with `corporate*` are required
      tags:
        - Sellers
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                businessType:
                  type: number
                  enum: [1, 2, 3]
                  example: 1
                shopName:
                  type: string
                  example: 'Sample'
                householdBusinessRegistrationDocument1:
                  type: string
                  format: binary
                householdBusinessRegistrationDocument2:
                  type: string
                  format: binary
                householdBusinessRegistrationDocument3:
                  type: string
                  format: binary
                householdBusinessName:
                  type: string
                  example: 'My Company'
                householdBusinessRegistrationNumber:
                  type: string
                  example: 'AB100000'
                householdBusinessOwnerName:
                  type: string
                  example: 'John Smith'
                householdBusinessOwnerIdNumber:
                  type: string
                  example: '123456789'
                individualIdentityCardFront:
                  type: string
                  format: binary
                individualIdentityCardBack:
                  type: string
                  format: binary
                individualIdentityCardNumber:
                  type: string
                  example: '123456789'
                individualOwnerDob:
                  type: string
                  format: date-time
                individualBusinessOwnerName:
                  type: string
                  example: 'John Smith'
                individualResidentialAddress:
                  type: string
                  example: '206 Lorem Ipsum st.'
                individualProductCategoryId:
                  type: integer
                  example: 1
                corporateCompanyRegistrationDocument1:
                  type: string
                  format: binary
                corporateCompanyRegistrationDocument2:
                  type: string
                  format: binary
                corporateCompanyRegistrationDocument3:
                  type: string
                  format: binary
                corporateCompanyName:
                  type: string
                  example: 'My Company'
                corporateEnterpiseCodeNumber:
                  type: string
                  example: 'AB100000'
                useCurrentEmail:
                  type: boolean
                newEmail:
                  type: string
                  format: email
                  example: johnsm@gmail.com
                newEmailOtp:
                  type: string
                useCurrentPhone:
                  type: string
                  example: 123456
                newPhone:
                  type: string
                  format: phone
                  example: '0123456789'
                newPhoneOtp:
                  type: string
                  example: 123456
                subscribeMailingList:
                  type: boolean
                  example: true
                isSubmitted:
                  type: boolean
                  example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ShopResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /sellers/logistics_services:
    get:
      summary: Get a list of shipping services
      tags:
        - Sellers
      responses:
        '200':
          description: A JSON array of shipping services
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/LogisticsService'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /sellers/logistics_services/subscribe:
    post:
      summary: Subscribe to a shipping service
      tags:
        - Sellers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          description: Bad Request
        '404':
          description: Logistics service was not found
        '500':
          description: Internal Server Error

  /sellers/logistics_services/unsubscribe:
    post:
      summary: Unsubscribe to a shipping service
      tags:
        - Sellers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
              properties:
                serviceId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          description: Bad Request
        '404':
          description: Logistics service was not found
        '500':
          description: Internal Server Error

  /sellers/logistics_services/estimate_shipping_fee:
    post:
      summary: Estimate shipping fee
      tags:
        - Sellers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
                - weight
                - width
                - height
                - length
              properties:
                serviceId:
                  type: integer
                  example: 1
                weight:
                  type: integer
                  example: 1000
                width:
                  type: integer
                  example: 20
                height:
                  type: integer
                  example: 20
                length:
                  type: integer
                  example: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  estimatedShippingFee:
                    type: number
                    format: float
                    example: 10000
        '400':
          description: Bad Request
        '404':
          description: Logistics service was not found
        '500':
          description: Internal Server Error

components:
  schemas:
    SellerBusinessTypesResponse:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: 'Household'
          description:
            type: string
            example: 'Dummy'

    ShopResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        sellerBusinessTypeId:
          type: integer
          example: 1
        shopName:
          type: string
          example: 'My Shop'
        userId:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: johnsm@gmail.com
        phone:
          type: string
          format: phone
          example: '0123456789'
        subscribeMailingList:
          type: boolean
          example: true
        householdBusinessRegistrationDocument1:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        householdBusinessRegistrationDocument2:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        householdBusinessRegistrationDocument3:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        householdBusinessName:
          type: string
          example: 'My Company'
        householdBusinessRegistrationNumber:
          type: string
          example: 'AB100000'
        householdBusinessOwnerName:
          type: string
          example: 'John Smith'
        householdBusinessOwnerIdNumber:
          type: string
          example: '123456789'
        individualIdentityCardFront:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        individualIdentityCardBack:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        individualIdentityCardNumber:
          type: string
          example: '123456789'
        individualOwnerDob:
          type: string
          format: date-time
        individualBusinessOwnerName:
          type: string
          example: 'John Smith'
        individualResidentialAddress:
          type: string
          example: '206 Lorem Ipsum st.'
        individualProductCategoryId:
          type: integer
          example: 1
        corporateCompanyRegistrationDocument1:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        corporateCompanyRegistrationDocument2:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        corporateCompanyRegistrationDocument3:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        corporateCompanyName:
          type: string
          example: 'My Company'
        corporateEnterpiseCodeNumber:
          type: string
          example: 'AB100000'
        isSubmitted:
          type: boolean
          example: false
        isVerified:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Variant:
      type: object
      properties:
        name:
          type: string
          description: The name of the variant category, such as size or color.
          example: Size
        options:
          type: array
          items:
            type: string
            example: Medium
          description: A list of available options for the variant category.

    Option:
      type: object
      properties:
        name:
          type: string
          description: The name of the option, such as 'Size' or 'Color'.
          example: Size
        value:
          type: string
          description: The value corresponding to the option name, such as 'Medium' or 'Red'.
          example: Medium

    ProductVariant:
      type: object
      properties:
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
          description: A list of option objects defining the characteristics of the product variant.
        price:
          type: integer
          format: float
          description: The price of the product variant.
          example: 100000
        sku:
          type: string
          description: The stock keeping unit identifier for the product variant.
          example: SKU001
        quantity:
          type: integer
          description: The available quantity of the product variant.
          example: 100

    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        uniqueId:
          type: string
          example: '17129807205638693702'
        name:
          type: string
          example: Sample Product
        description:
          type: string
          example: Dummy dummy dummy
        price:
          type: number
          format: float
          example: 100000
        sku:
          type: string
          example: SKU0001
        quantity:
          type: integer
          example: 100
        shopId:
          type: integer
          example: 1
        productStatusId:
          type: integer
          example: 1
        thumbnailImage:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        thumbnailVideo:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        productImages:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              file:
                type: string
                example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        productVideos:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              file:
                type: string
                example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.mp4'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        productVariants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # UserAddRequest:
    #   type: object
    #   properties:
    #     name:
    #       type: string
    #       example: John Smith
    #     password:
    #       type: string
    #       example: securePassword
    #     phone:
    #       type: string
    #       example: "0123456789"
    #     avatar:
    #       type: string
    #       example: https://s3.amazon-aws.com/example-bucket/user-media/dummy_0001.jpg
    #     gender:
    #       type: integer
    #       example: 1
    #     dob:
    #       type: string
    #       format: date-time
    #     language_id:
    #       type: integer
    #       example: 1
    #     currency_id:
    #       type: integer
    #       example: 1
    #     is_email_validated:
    #       type: boolean
    #     is_phone_validated:
    #       type: boolean
    #     is_active:
    #       type: boolean

    # UserUpdateRequest:
    #   type: object
    #   properties:
    #     name:
    #       type: string
    #       example: John Smith
    #     phone:
    #       type: string
    #       example: "0123456789"
    #     avatar:
    #       type: string
    #       example: https://s3.amazon-aws.com/example-bucket/user-media/dummy_0001.jpg
    #     gender:
    #       type: integer
    #       example: 1
    #     dob:
    #       type: string
    #       format: date-time
    #     language_id:
    #       type: integer
    #       example: 1
    #     currency_id:
    #       type: integer
    #       example: 1
    #     is_email_validated:
    #       type: boolean
    #     is_phone_validated:
    #       type: boolean
    #     is_active:
    #       type: boolean

    # Language:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       example: 1
    #     name:
    #       type: string
    #       example: English
    #     created_at:
    #       type: string
    #       format: date-time
    #     updated_at:
    #       type: string
    #       format: date-time

    # Currency:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       example: 1
    #     name:
    #       type: string
    #       example: U.S. dollar
    #     code:
    #       type: string
    #       example: USD
    #     symbol:
    #       type: string
    #       example: $
    #     created_at:
    #       type: string
    #       format: date-time
    #     updated_at:
    #       type: string
    #       format: date-time

    SimpleResponse:
      type: object
      properties:
        data:
          type: object
          example: true

    LogisticsService:
      type: object
      properties:
        id:
          type: integer
          example: 1
          format: int32
          description: The unique identifier of the logistics service.
        name:
          type: string
          example: Bulky shipping
          description: The name of the logistics service.
        description:
          type: string
          example: dummy
          nullable: true
          description: The detailed description of the logistics service.
        isSubscribed:
          type: boolean
          example: true
          description: Check if the current shop subscribed to the logistics service.
        logisticsProviders:
          type: array
          items:
            $ref: '#/components/schemas/LogisticsProvider'
      description: Represents a logistics service with associated logistics providers.

    LogisticsProvider:
      type: object
      properties:
        id:
          type: integer
          example: 1
          format: int32
          description: The unique identifier of the logistics provider.
        name:
          type: string
          example: FedEx
          description: The name of the logistics provider.
        description:
          type: string
          example: dummy
          nullable: true
          description: The detailed description of the logistics provider.
        logo:
          type: string
          example: https://storage.googleapis.com/dummy.png
          format: uri
          description: The URL to the logo of the logistics provider.
        logisticsProvidersOptions:
          type: array
          items:
            $ref: '#/components/schemas/LogisticsProviderOption'
      description: Represents a logistics provider with its options.

    LogisticsProviderOption:
      type: object
      properties:
        packageWeightMin:
          type: integer
          format: int32
          example: 0
          description: The minimum weight of the package in grams.
        packageWeightMax:
          type: integer
          format: int32
          example: 2000
          description: The maximum weight of the package in grams.
        packageWidthMax:
          type: integer
          format: int32
          example: 100
          description: The maximum width of the package in centimeters.
        packageHeightMax:
          type: integer
          format: int32
          example: 100
          description: The maximum height of the package in centimeters.
        packageLengthMax:
          type: integer
          format: int32
          example: 100
          description: The maximum length of the package in centimeters.
        codSupported:
          type: boolean
          example: true
          description: Indicates if cash on delivery is supported.
        cpSupported:
          type: boolean
          example: false
          description: Indicates if card payment is supported.
      description: Represents the options provided by the logistics provider for handling packages.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
