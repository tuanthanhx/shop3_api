openapi: 3.0.0
info:
  title: Shop3 API
  description: Documentation for Shop3 API (Administrator)
  version: 1.0.0
servers:
  - url: https://shop3-api.codingbombs.com:3001
  - url: http://127.0.0.1:3000

paths:
  /api-admin/v1/categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: keyword
          in: query
          description: Search by product name
          example: Example
          required: false
          style: form
          schema:
            type: string
            default: null
        - name: parentId
          in: query
          description: ID of the parent category
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: The page number for paginated results
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortField
          in: query
          description: Sort result by field
          required: false
          schema:
            type: string
            enum: ['id', 'name', 'createdAt', 'updatedAt']
        - name: sortOrder
          in: query
          description: Sort result in direction
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                    example: 100
                  totalPages:
                    type: integer
                    example: 10
                  currentPage:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: New Category
                image:
                  type: string
                  format: uri
                  example: https://storage.googleapis.com/dummy.jpg
                parentId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /api-admin/v1/categories/:id:
    put:
      summary: Update a category
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Category Id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: New Category
                image:
                  type: string
                  format: uri
                  example: https://storage.googleapis.com/dummy.jpg
                parentId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: The updated category
        '400':
          description: Bad Request
        '404':
          description: Category not found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a category
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Category Id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
        '400':
          description: Bad Request
        '404':
          description: Category not found
        '500':
          description: Internal Server Error

  /api-admin/v1/categories/:id/attributes:
    get:
      summary: Get all attributes of the category
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          description: Category Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of attributes of the category
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int32
                          example: 1
                        name:
                          type: string
                          example: Season
                        attributeValues:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                format: int32
                                example: 1
                              name:
                                type: string
                                example: Spring
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []

  /api-admin/v1/languages:
    get:
      summary: Get all languages
      tags:
        - Languages
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Names to filter by.
          required: false
          style: form
          schema:
            type: string
        - name: page
          in: query
          description: The page number for paginated results.
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: Maximum number of results to return.
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: List of Languages
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LanguageResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

    post:
      summary: Create a language.
      tags:
        - Languages
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: English
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageResponse'
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '500':
          description: Internal Server Error

  /api-admin/v1/languages/:id:
    get:
      summary: Get a language
      tags:
        - Languages
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Language Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detail of a language
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/LanguageResponse'
        '400':
          description: Bad Request
        '404':
          description: Language not found
        '500':
          description: Internal Server Error

    put:
      summary: Update a language.
      tags:
        - Languages
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Language Id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: English
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageResponse'
        '400':
          description: Bad Request
        '404':
          description: Language not found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a language
      tags:
        - Languages
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Language Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted
        '400':
          description: Bad Request
        '404':
          description: Language not found
        '500':
          description: Internal Server Error

  /api-admin/v1/currencies:
    get:
      summary: Get all currencies
      tags:
        - Currencies
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Names to filter by.
          required: false
          style: form
          schema:
            type: string
        - name: code
          in: query
          description: Codes to filter by.
          required: false
          style: form
          schema:
            type: string
        - name: page
          in: query
          description: The page number for paginated results.
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: Maximum number of results to return.
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: List of Currencies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CurrencyResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

    post:
      summary: Create a currency.
      tags:
        - Currencies
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - code
                - symbol
              properties:
                name:
                  type: string
                  example: U.S. dollar
                code:
                  type: string
                  example: USD
                symbol:
                  type: string
                  example: $
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyResponse'
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '500':
          description: Internal Server Error

  /api-admin/v1/currencies/:id:
    get:
      summary: Get a currency
      tags:
        - Currencies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Currency Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detail of a currency
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/CurrencyResponse'
        '400':
          description: Bad Request
        '404':
          description: Currency not found
        '500':
          description: Internal Server Error

    put:
      summary: Update a currency.
      tags:
        - Currencies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Currency Id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - code
                - symbol
              properties:
                name:
                  type: string
                  example: U.S. dollar
                code:
                  type: string
                  example: USD
                symbol:
                  type: string
                  example: $
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyResponse'
        '400':
          description: Bad Request
        '404':
          description: Currency not found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a currency
      tags:
        - Currencies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Currency Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted
        '400':
          description: Bad Request
        '404':
          description: Currency not found
        '500':
          description: Internal Server Error

  /api-admin/v1/brands:
    get:
      summary: Get all brands
      tags:
        - Brands
      security:
        - bearerAuth: []
      parameters:
        - name: keyword
          in: query
          description: Search by product name or description
          example: Example
          required: false
          style: form
          schema:
            type: string
            default: null
        - name: page
          in: query
          description: The page number for paginated results
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortField
          in: query
          description: Sort result by field
          required: false
          schema:
            type: string
            enum: ['id', 'name', 'createdAt', 'updatedAt']
        - name: sortOrder
          in: query
          description: Sort result in direction
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']
      responses:
        '200':
          description: List of Brands
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                    example: 100
                  totalPages:
                    type: integer
                    example: 10
                  currentPage:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BrandResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

    post:
      summary: Create a brand.
      tags:
        - Brands
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Nike
                description:
                  type: string
                  example: Dummy
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/BrandResponse'
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '500':
          description: Internal Server Error

  /api-admin/v1/brands/:id:
    get:
      summary: Get a brand
      tags:
        - Brands
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Brand Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detail of a brand
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/BrandResponse'
        '400':
          description: Bad Request
        '404':
          description: Brand not found
        '500':
          description: Internal Server Error

    put:
      summary: Update a brand.
      tags:
        - Brands
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Brand Id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Nike
                description:
                  type: string
                  example: Dummy
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/BrandResponse'
        '400':
          description: Bad Request
        '404':
          description: Brand not found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a brand
      tags:
        - Brands
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Brand Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted
        '400':
          description: Bad Request
        '404':
          description: Brand not found
        '500':
          description: Internal Server Error

  /api-admin/v1/user_groups:
    get:
      summary: Get all user groups
      tags:
        - User Groups
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of User Groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserGroupResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /api-admin/v1/users:
    get:
      summary: Get all Users
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: keyword
          in: query
          description: Search by product name, email or phone
          example: Example
          required: false
          style: form
          schema:
            type: string
            default: null
        - name: groupId
          in: query
          description: User Group ID to filter by
          required: false
          schema:
            type: integer
        - name: status
          in: query
          description: Status to filter by
          required: false
          schema:
            type: string
            enum: ['active', 'inactive']
        - name: page
          in: query
          description: The page number for paginated results
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortField
          in: query
          description: Sort result by field
          required: false
          schema:
            type: string
            enum: ['id', 'name', 'email', 'phone', 'userGroupId', 'isActive', 'createdAt', 'updatedAt']
        - name: sortOrder
          in: query
          description: Sort result in direction
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']
      responses:
        '200':
          description: List of Users
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                    example: 100
                  totalPages:
                    type: integer
                    example: 10
                  currentPage:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'

  /api-admin/v1/users/:id:
    get:
      summary: Get an User
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detail of an User
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  /api-admin/v1/media/files:
    post:
      summary: Upload Files
      tags:
        - Media
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
              properties:
                files:
                  type: array
                  maxItems: 10
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    maxItems: 10
                    items:
                      type: string
                      format: uri
                      example: https://storage.googleapis.com/dummy.jpg
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /api-admin/v1/shops:
    get:
      summary: Get all shops
      description: Show shops that have been submitted
      tags:
        - Shops
      security:
        - bearerAuth: []
      parameters:
        - name: keyword
          in: query
          description: Search by product name, email or phone
          example: Example
          required: false
          style: form
          schema:
            type: string
            default: null
        - name: status
          in: query
          description: Status to filter by
          required: false
          schema:
            type: string
            enum: ['active', 'inactive', 'review']
        - name: page
          in: query
          description: The page number for paginated results
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortField
          in: query
          description: Sort result by field
          required: false
          schema:
            type: string
            enum: ['id', 'shopName', 'sellerBusinessTypeId', 'email', 'phone', 'isActive', 'createdAt', 'updatedAt']
        - name: sortOrder
          in: query
          description: Sort result in direction
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']
      responses:
        '200':
          description: List of Shops
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                    example: 100
                  totalPages:
                    type: integer
                    example: 10
                  currentPage:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShopResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /api-admin/v1/shops/:id:
    get:
      summary: Get a shop
      tags:
        - Shops
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Shop Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detail of a shop
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ShopResponse'
        '400':
          description: Bad Request
        '404':
          description: Shop not found
        '500':
          description: Internal Server Error

  /api-admin/v1/shops/:id/verify:
    post:
      summary: Verify a Shop
      tags:
        - Shops
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Shop Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Verified
        '400':
          description: Bad Request
        '404':
          description: Shop not found
        '500':
          description: Internal Server Error

  /api-admin/v1/shops/:id/activate:
    post:
      summary: Activate a Shop
      tags:
        - Shops
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Shop Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Activated
        '400':
          description: Bad Request
        '404':
          description: Shop not found
        '500':
          description: Internal Server Error

  /api-admin/v1/shops/:id/deactivate:
    post:
      summary: Deactivate a Shop
      tags:
        - Shops
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Shop Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deactivated
        '400':
          description: Bad Request
        '404':
          description: Shop not found
        '500':
          description: Internal Server Error

components:
  schemas:
    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Bathroom Supplies
        image:
          type: string
          format: uri
          example: https://storage.googleapis.com/dummy.jpg
        parentId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    LanguageResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: English
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CurrencyResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: U.S. dollar
        code:
          type: string
          example: USD
        symbol:
          type: string
          example: $
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BrandResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Nike
        description:
          type: string
          example: Dummy
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserGroupResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Unregistered
        description:
          type: string
          example: Dummy
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        uuid:
          type: string
          format: uuid
          example: 6252290c-1a4e-4556-a8cd-e3e32e316fd7
        shopId:
          type: integer
          example: 1
        name:
          type: string
          example: John Smith
        email:
          type: string
          example: johnsm@gmail.com
        phone:
          type: string
          example: '0123456789'
        avatar:
          type: string
          example: https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg
        gender:
          type: integer
          example: 1
        dob:
          type: string
          format: date-time
        languageId:
          type: integer
          example: 1
        currencyId:
          type: integer
          example: 1
        subscribeMailingList:
          type: boolean
        isPhoneValidated:
          type: boolean
        isEmailValidated:
          type: boolean
        isActive:
          type: boolean
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ShopResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        sellerBusinessTypeId:
          type: integer
          example: 1
        shopName:
          type: string
          example: 'My Shop'
        userId:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: johnsm@gmail.com
        phone:
          type: string
          format: phone
          example: '0123456789'
        subscribeMailingList:
          type: boolean
          example: true
        householdBusinessRegistrationDocument1:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        householdBusinessRegistrationDocument2:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        householdBusinessRegistrationDocument3:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        householdBusinessName:
          type: string
          example: 'My Company'
        householdBusinessRegistrationNumber:
          type: string
          example: 'AB100000'
        householdBusinessOwnerName:
          type: string
          example: 'John Smith'
        householdBusinessOwnerIdNumber:
          type: string
          example: '123456789'
        individualIdentityCardFront:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        individualIdentityCardBack:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        individualIdentityCardNumber:
          type: string
          example: '123456789'
        individualOwnerDob:
          type: string
          format: date-time
        individualBusinessOwnerName:
          type: string
          example: 'John Smith'
        individualResidentialAddress:
          type: string
          example: '206 Lorem Ipsum st.'
        individualProductCategoryId:
          type: integer
          example: 1
        corporateCompanyRegistrationDocument1:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        corporateCompanyRegistrationDocument2:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        corporateCompanyRegistrationDocument3:
          type: string
          example: 'https://storage.googleapis.com/dummy/file_44103033-d9f4-4933-bacc-11701c90e58a.jpg'
        corporateCompanyName:
          type: string
          example: 'My Company'
        corporateEnterpiseCodeNumber:
          type: string
          example: 'AB100000'
        isSubmitted:
          type: boolean
          example: true
        isVerified:
          type: boolean
          example: false
        isActive:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
