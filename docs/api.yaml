openapi: 3.0.0
info:
  title: Shop3 API
  description: Documentation for Shop3 API.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:3000/api/v1

paths:
  /register/email:
    post:
      summary: Register a new user by email
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - verification_code
                - password
                - password_confirm
              properties:
                email:
                  type: string
                  format: email
                  example: johnsm@gmail.com
                verification_code:
                  type: string
                  example: "123456"
                password:
                  type: string
                  example: securePassword
                password_confirm:
                  type: string
                  example: securePassword
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /register/phone:
    post:
      summary: Register a new user by phone number
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - verification_code
                - password
                - password_confirm
              properties:
                phone:
                  type: string
                  example: "0123456789"
                verification_code:
                  type: string
                  example: "123456"
                password:
                  type: string
                  example: securePassword
                password_confirm:
                  type: string
                  example: securePassword
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /auth/is_login:
    get:
      summary: Check if user is logged in or not
      tags:
        - Authentication
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
                    example: true
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /auth/refresh_token:
    post:
      summary: Refresh the access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzEyODA4ODA2LCJleHAiOjE3MTU0MDA4MDZ9.q5nQpO8LJjAsR0DGZwGqpcpAT1nBQQ73XvsiXckLAOo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzEyODA4OTc2LCJleHAiOjE3MTI4MDk4NzZ9.n1h2ue1hn8j5ZfSwtqtpOokDyMp8dPEu-K5Luw4aiwY"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

  /auth/login/email:
    post:
      summary: Login by email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: johnsm@gmail.com
                password:
                  type: string
                  example: securePassword
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /auth/login/phone:
    post:
      summary: Login by phone
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - password
              properties:
                phone:
                  type: string
                  example: "0123456789"
                password:
                  type: string
                  example: securePassword
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /auth/reset_password/email:
    post:
      summary: Reset password by email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - password_confirm
                - verification_code
              properties:
                email:
                  type: string
                  format: email
                  example: johnsm@gmail.com
                password:
                  type: string
                  example: securePassword
                password_confirm:
                  type: string
                  example: securePassword
                verification_code:
                  type: string
                  example: "123456"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    example: true
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /auth/reset_password/phone:
    post:
      summary: Reset password by phone
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - password
                - password_confirm
                - verification_code
              properties:
                phone:
                  type: string
                  example: "0123456789"
                password:
                  type: string
                  example: securePassword
                password_confirm:
                  type: string
                  example: securePassword
                verification_code:
                  type: string
                  example: "123456"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    example: true
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /auth/generate_otp/email:
    post:
      summary: Generate OTP code by email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "johnsm@gmail.com"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    example: true
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /auth/generate_otp/phone:
    post:
      summary: Generate OTP code by phone
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
              properties:
                phone:
                  type: string
                  example: "0123456789"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    example: true
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /auth/logout:
    post:
      summary: Logout
      tags:
        - Authentication
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  # /users:
  #   get:
  #     summary: Returns a list of users.
  #     tags:
  #       - Users
  #     parameters:
  #       - name: name
  #         in: query
  #         description: Names to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: email
  #         in: query
  #         description: Emails to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: phone
  #         in: query
  #         description: Phones to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: page
  #         in: query
  #         description: The page number for paginated results.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 1
  #       - name: limit
  #         in: query
  #         description: Maximum number of results to return.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 10
  #     responses:
  #       "200":
  #         description: A JSON array of user
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 totalItems:
  #                   type: integer
  #                   example: 100
  #                 totalPages:
  #                   type: integer
  #                   example: 10
  #                 currentPage:
  #                   type: integer
  #                   example: 1
  #                 data:
  #                   type: array
  #                   items:
  #                     $ref: "#/components/schemas/User"

  #     security:
  #       - bearerAuth: []
  #   post:
  #     summary: Creates a user.
  #     tags:
  #       - Users
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/UserAddRequest"
  #     responses:
  #       "200":
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #     security:
  #       - bearerAuth: []

  /users/me:
    get:
      summary: Get the current user data
      tags:
        - Users
      responses:
        "200":
          description: A JSON object of user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - bearerAuth: []

  # /users/{id}:
  #   get:
  #     summary: Returns a user by ID.
  #     tags:
  #       - Users
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of user
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: A JSON object of user
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #     security:
  #       - bearerAuth: []
  #   put:
  #     summary: Updates a user.
  #     tags:
  #       - Users
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of user
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/UserUpdateRequest"
  #     responses:
  #       "200":
  #         description: Updated
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #     security:
  #       - bearerAuth: []
  #   delete:
  #     summary: Deletes a user.
  #     tags:
  #       - Users
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of user
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: Deleted
  #     security:
  #       - bearerAuth: []

  # /languages:
  #   get:
  #     summary: Returns a list of languages.
  #     tags:
  #       - Languages
  #     parameters:
  #       - name: name
  #         in: query
  #         description: Names to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: page
  #         in: query
  #         description: The page number for paginated results.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 1
  #       - name: limit
  #         in: query
  #         description: Maximum number of results to return.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 10
  #     responses:
  #       "200":
  #         description: A JSON array of languages
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 totalItems:
  #                   type: integer
  #                   example: 100
  #                 totalPages:
  #                   type: integer
  #                   example: 10
  #                 currentPage:
  #                   type: integer
  #                   example: 1
  #                 data:
  #                   type: array
  #                   items:
  #                     $ref: "#/components/schemas/Language"
  #     security:
  #       - bearerAuth: []
  #   post:
  #     summary: Creates a language.
  #     tags:
  #       - Languages
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: English
  #     responses:
  #       "200":
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Language"
  #     security:
  #       - bearerAuth: []

  # /languages/{id}:
  #   get:
  #     summary: Returns a language by ID.
  #     tags:
  #       - Languages
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of language
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: A JSON object of language
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Language"
  #     security:
  #       - bearerAuth: []
  #   put:
  #     summary: Updates a language.
  #     tags:
  #       - Languages
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of language
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: English
  #     responses:
  #       "200":
  #         description: Updated
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Language"
  #     security:
  #       - bearerAuth: []
  #   delete:
  #     summary: Deletes a language.
  #     tags:
  #       - Languages
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of language
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: Deleted
  #     security:
  #       - bearerAuth: []

  # /currencies:
  #   get:
  #     summary: Returns a list of currencies.
  #     tags:
  #       - Currencies
  #     parameters:
  #       - name: name
  #         in: query
  #         description: Names to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: code
  #         in: query
  #         description: Codes to filter by.
  #         required: false
  #         style: form
  #         schema:
  #           type: string
  #       - name: page
  #         in: query
  #         description: The page number for paginated results.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 1
  #       - name: limit
  #         in: query
  #         description: Maximum number of results to return.
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 10
  #     responses:
  #       "200":
  #         description: A JSON array of currencies
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 totalItems:
  #                   type: integer
  #                   example: 100
  #                 totalPages:
  #                   type: integer
  #                   example: 10
  #                 currentPage:
  #                   type: integer
  #                   example: 1
  #                 data:
  #                   type: array
  #                   items:
  #                     $ref: "#/components/schemas/Currency"
  #     security:
  #       - bearerAuth: []
  #   post:
  #     summary: Creates a currency.
  #     tags:
  #       - Currencies
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: U.S. dollar
  #               code:
  #                 type: string
  #                 example: USD
  #               symbol:
  #                 type: string
  #                 example: $
  #     responses:
  #       "200":
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Currency"
  #     security:
  #       - bearerAuth: []

  # /currencies/{id}:
  #   get:
  #     summary: Returns a currency by ID.
  #     tags:
  #       - Currencies
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of currency
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: A JSON object of currency
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Currency"
  #     security:
  #       - bearerAuth: []
  #   put:
  #     summary: Updates a currency.
  #     tags:
  #       - Currencies
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of currency
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: U.S. dollar
  #               code:
  #                 type: string
  #                 example: USD
  #               symbol:
  #                 type: string
  #                 example: $
  #     responses:
  #       "200":
  #         description: Updated
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Currency"
  #     security:
  #       - bearerAuth: []
  #   delete:
  #     summary: Deletes a currency.
  #     tags:
  #       - Currencies
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of currency
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: Deleted
  #     security:
  #       - bearerAuth: []

  /sellers/business_types:
    get:
      summary: Get a list of business types
      tags:
        - Sellers
      responses:
        "200":
          description: A JSON array of business types
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/SellerBusinessTypesResponse"
      security:
        - bearerAuth: []

components:
  schemas:
    # User:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       example: 1
    #     uuid:
    #       type: string
    #       format: uuid
    #       example: 6252290c-1a4e-4556-a8cd-e3e32e316fd7
    #     name:
    #       type: string
    #       example: John Smith
    #     email:
    #       type: string
    #       example: johnsm@gmail.com
    #     phone:
    #       type: string
    #       example: "0123456789"
    #     avatar:
    #       type: string
    #       example: https://s3.amazon-aws.com/example-bucket/user-media/dummy_0001.jpg
    #     gender:
    #       type: integer
    #       example: 1
    #     dob:
    #       type: string
    #       format: date-time
    #     language_id:
    #       type: integer
    #       example: 1
    #     currency_id:
    #       type: integer
    #       example: 1
    #     is_email_validated:
    #       type: boolean
    #     is_phone_validated:
    #       type: boolean
    #     is_active:
    #       type: boolean
    #     last_login:
    #       type: string
    #       format: date-time
    #     created_at:
    #       type: string
    #       format: date-time
    #     updated_at:
    #       type: string
    #       format: date-time

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzEyODA4OTc2LCJleHAiOjE3MTI4MDk4NzZ9.n1h2ue1hn8j5ZfSwtqtpOokDyMp8dPEu-K5Luw4aiwY"
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzEyODA4ODA2LCJleHAiOjE3MTU0MDA4MDZ9.q5nQpO8LJjAsR0DGZwGqpcpAT1nBQQ73XvsiXckLAOo"

    SellerBusinessTypesResponse:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: "Household"
          description:
            type: string
            example: "Dummy"

    # UserAddRequest:
    #   type: object
    #   properties:
    #     name:
    #       type: string
    #       example: John Smith
    #     password:
    #       type: string
    #       example: securePassword
    #     phone:
    #       type: string
    #       example: "0123456789"
    #     avatar:
    #       type: string
    #       example: https://s3.amazon-aws.com/example-bucket/user-media/dummy_0001.jpg
    #     gender:
    #       type: integer
    #       example: 1
    #     dob:
    #       type: string
    #       format: date-time
    #     language_id:
    #       type: integer
    #       example: 1
    #     currency_id:
    #       type: integer
    #       example: 1
    #     is_email_validated:
    #       type: boolean
    #     is_phone_validated:
    #       type: boolean
    #     is_active:
    #       type: boolean

    # UserUpdateRequest:
    #   type: object
    #   properties:
    #     name:
    #       type: string
    #       example: John Smith
    #     phone:
    #       type: string
    #       example: "0123456789"
    #     avatar:
    #       type: string
    #       example: https://s3.amazon-aws.com/example-bucket/user-media/dummy_0001.jpg
    #     gender:
    #       type: integer
    #       example: 1
    #     dob:
    #       type: string
    #       format: date-time
    #     language_id:
    #       type: integer
    #       example: 1
    #     currency_id:
    #       type: integer
    #       example: 1
    #     is_email_validated:
    #       type: boolean
    #     is_phone_validated:
    #       type: boolean
    #     is_active:
    #       type: boolean

    # Language:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       example: 1
    #     name:
    #       type: string
    #       example: English
    #     created_at:
    #       type: string
    #       format: date-time
    #     updated_at:
    #       type: string
    #       format: date-time

    # Currency:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       example: 1
    #     name:
    #       type: string
    #       example: U.S. dollar
    #     code:
    #       type: string
    #       example: USD
    #     symbol:
    #       type: string
    #       example: $
    #     created_at:
    #       type: string
    #       format: date-time
    #     updated_at:
    #       type: string
    #       format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
